{"version":3,"sources":["components/Header/index.js","components/Main/FormContainer/index.js","components/Main/ResultContainer/ListItem.js","components/Main/ResultContainer/ListContainer.js","components/Main/ResultContainer/index.js","components/Main/index.js","components/Footer/index.js","components/Main/Modal.js","components/Main/Loading.js","App.js","serviceWorker.js","index.js"],"names":["HeaderContainer","styled","header","H1","h1","Header","props","StyledFormContainer","form","BlockSection","section","H2","h2","FormTitle","Row","div","Cell","Input","input","Label","label","ButtonSection","Button","button","FormContainer","htmlFor","required","id","value","inputValue","placeholder","type","onChange","e","handleChangeInputValue","target","checked","checkboxValue","handleChangeCheckboxValue","disabled","isNaN","trim","onClick","handleFilterByLengthClick","parseInt","handleFilterBySubstringClick","StyledListItem","li","ListItem","StyledListContainer","ol","ListContainer","generateRandomIndex","chars","split","str","i","Math","floor","random","length","resultArray","map","item","key","StyledResultContainer","H3","h3","ResultContainer","MainContainer","main","MainSection","Main","React","memo","FooterContainer","footer","ProjectDescription","p","Link","a","Span","span","Footer","href","handleClickOpenModal","ModalPadding","ModalWindow","ModalHeader","H4","h4","CloseBtn","ModalBody","UL","ul","Modal","rotate","keyframes","LoadingPadding","LoadingBody","Loading","StyledApp","App","useState","setInputValue","setCheckboxValue","setResultArray","isModalOpen","setModalOpen","isLoading","setLoading","getResultFilteredByLength","getData","then","data","filter","word","Number","result","catch","err","alert","message","getCaseSensitiveSubstr","indexOf","getCaseInsensitiveSubstr","toLowerCase","toLocaleLowerCase","fetch","method","headers","response","json","preventDefault","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"2tBAGA,IAAMA,EAAkBC,IAAOC,OAAV,KAYfC,EAAKF,IAAOG,GAAV,KAOFC,EAAS,SAAAC,GACX,OACI,kBAACN,EAAD,KACI,kBAACG,EAAD,2B,81FCtBZ,IAAMI,EAAsBN,IAAOO,KAAV,KAKnBC,EAAeR,IAAOS,QAAV,KAKZC,EAAKV,IAAOW,GAAV,KAKFC,EAAYZ,YAAOU,EAAPV,CAAH,KAITa,EAAMb,IAAOc,IAAV,KAOHC,EAAOf,IAAOc,IAAV,KAmBJE,EAAQhB,IAAOiB,MAAV,KAoBLC,EAAQlB,IAAOmB,MAAV,KAYLC,EAAgBpB,IAAOS,QAAV,KAWbY,EAASrB,IAAOsB,OAAV,KA8BNC,EAAgB,SAAAlB,GAClB,OACI,kBAACC,EAAD,KACI,kBAACE,EAAD,KACI,kBAACI,EAAD,cAEJ,kBAACJ,EAAD,KACI,kBAACO,EAAD,KACI,kBAACF,EAAD,KACI,kBAACE,EAAD,KACI,kBAACG,EAAD,CAAOM,QAAQ,SAAf,4BAEJ,kBAACT,EAAD,KACI,kBAACC,EAAD,CACIS,UAAQ,EACRC,GAAG,QACHC,MAAOtB,EAAMuB,WACbC,YAAY,yBACZC,KAAK,QACLC,SAAU,SAACC,GAAD,OAAO3B,EAAM4B,uBAAuBD,EAAEE,OAAOP,aAMvE,kBAACZ,EAAD,KACI,kBAACF,EAAD,KACI,kBAACE,EAAD,KACI,kBAACG,EAAD,CAAOM,QAAQ,QAAf,oBAEJ,kBAACT,EAAD,KACI,kBAACC,EAAD,CACIS,UAAQ,EACRC,GAAG,OACHS,QAAS9B,EAAM+B,cACfN,KAAK,WACLC,SAAU,SAACC,GAAD,OAAO3B,EAAMgC,0BAA0BL,EAAEE,OAAOP,QAC1DW,UAAUC,MAAMlC,EAAMuB,WAAWY,SAAsC,IAA3BnC,EAAMuB,WAAWY,aAOjF,kBAACpB,EAAD,KACI,kBAACC,EAAD,CACIoB,QAAS,SAAAT,GAAC,OAAI3B,EAAMqC,0BAA0BV,IAC9CM,SAAUK,SAAStC,EAAMuB,WAAWY,SAAWnC,EAAMuB,YAFzD,oBAIA,kBAACP,EAAD,CACIoB,QAAS,SAAAT,GAAC,OAAI3B,EAAMuC,6BAA6BZ,IACjDM,UAAUC,MAAMlC,EAAMuB,WAAWY,SAAsC,IAA3BnC,EAAMuB,WAAWY,QAFjE,0B,+HCvKhB,IAAMK,EAAiB7C,IAAO8C,GAAV,KAKdC,EAAW,SAAA1C,GACb,OACI,kBAACwC,EAAD,KAAiBxC,EAAMsB,Q,uICN/B,IAAMqB,EAAsBhD,IAAOiD,GAAV,KAMnBC,EAAgB,SAAA7C,GAClB,IAAM8C,EAAsB,WAIxB,IAHA,IAAIC,EAAQ,mEAAmEC,MAAM,IAEjFC,EAAM,GACDC,EAAI,EAAGA,EAAI,GAAIA,IACpBD,GAAOF,EAAMI,KAAKC,MAAMD,KAAKE,SAAYN,EAAMO,SAEnD,OAAOL,GAGX,OACI,kBAACN,EAAD,KACK3C,EAAMuD,YAAYC,KAAI,SAAAC,GACnB,OACI,kBAAC,EAAD,CAAUC,IAAKZ,IAAuBxB,MAAOmC,S,+ZCrBjE,IAAME,EAAwBhE,IAAOS,QAAV,KAUrBwD,EAAKjE,IAAOkE,GAAV,KAIFtD,EAAYZ,YAAOiE,EAAPjE,CAAH,KAITmE,EAAkB,SAAA9D,GACpB,OACI,kBAAC2D,EAAD,KACI,kBAAC,EAAD,eACC3D,EAAMuD,YAAYD,OAAS,kBAAC,EAAD,CAAeC,YAAavD,EAAMuD,cAAkB,gE,2jBCrB5F,IAAMQ,GAAgBpE,IAAOqE,KAAV,KAWbC,GAActE,IAAOS,QAAV,KAYX8D,GAAOC,IAAMC,MAAK,SAAApE,GACpB,OACI,kBAAC+D,GAAD,KACI,kBAACE,GAAD,KACI,kBAAC,EAAD,CACI1C,WAAYvB,EAAMuB,WAClBQ,cAAe/B,EAAM+B,cACrBH,uBAAwB5B,EAAM4B,uBAC9BI,0BAA2BhC,EAAMgC,0BACjCK,0BAA2BrC,EAAMqC,0BACjCE,6BAA8BvC,EAAMuC,+BAEvCvC,EAAMuD,YACH,kBAAC,EAAD,CACIA,YAAavD,EAAMuD,cAEvB,U,onBCzCpB,IAAMc,GAAkB1E,IAAO2E,OAAV,MAYfC,GAAqB5E,IAAO6E,EAAV,MAIlBC,GAAO9E,IAAO+E,EAAV,MAKJC,GAAOhF,IAAOiF,KAAV,MAKJC,GAAS,SAAA7E,GACX,OACI,kBAACqE,GAAD,KACI,kBAACE,GAAD,0BAAsC,kBAACE,GAAD,CAAMK,KAAK,wBAAX,SAAtC,KAAsF,kBAACL,GAAD,CAAMK,KAAK,kCAAX,qBAAtF,QAA+J,kBAACL,GAAD,CAAMK,KAAK,cAAX,UAA/J,IAAqM,6BAArM,+BAC4B,kBAACH,GAAD,CAAMvC,QAAS,SAAAT,GAAC,OAAI3B,EAAM+E,qBAAqBpD,KAA/C,aAD5B,iCAC6H,kBAAC8C,GAAD,CAAMK,KAAK,0BAAX,aAD7H,IACkL,6BAClL,kBAACL,GAAD,CAAMK,KAAK,qDAAX,oBAAsF,6BACtF,kBAACL,GAAD,CAAMK,KAAK,yDAAX,e,q9CChCZ,IAAME,GAAerF,IAAOc,IAAV,MAWZwE,GAActF,IAAOc,IAAV,MAcXyE,GAAcvF,IAAOS,QAAV,MAKX+E,GAAKxF,IAAOyF,GAAV,MAMFC,GAAW1F,IAAOsB,OAAV,MAiBRqE,GAAY3F,IAAOS,QAAV,MAITmF,GAAK5F,IAAO6F,GAAV,MAKFC,GAAQ,SAAAzF,GACV,OACI,kBAACgF,GAAD,CAAc3D,GAAG,eAAee,QAAS,SAAAT,IAAuB,iBAAhBA,EAAEE,OAAOR,IAAyC,WAAhBM,EAAEE,OAAOR,KAAoBrB,EAAM+E,qBAAqBpD,KACtI,kBAACsD,GAAD,KACI,kBAACC,GAAD,KACI,kBAACG,GAAD,CAAUhE,GAAG,SAASI,KAAK,UAA3B,KACA,kBAAC0D,GAAD,qGAEJ,kBAACG,GAAD,KACQ,mNACI,kBAACC,GAAD,KACI,2GACA,yCACA,wFACA,6JAEJ,6nBAAkI,6BAAlI,6uBAC8H,6BAD9H,2uBAE4H,6BAF5H,qzBAG6K,6BAH7K,+gB,uwBC9E5B,IAAMG,GAASC,YAAH,MAUNC,GAAiBjG,IAAOc,IAAV,MAWdoF,GAAclG,IAAOS,QAAV,KAUAsF,IAGXI,GAAU,SAAA9F,GACZ,OACI,kBAAC4F,GAAD,KACI,kBAACC,GAAD,Q,0QChCZ,IAAME,GAAYpG,IAAOc,IAAV,MA8HAuF,GApHH7B,IAAMC,MAAK,SAAApE,GAAU,IAAD,EACQiG,mBAAS,IADjB,mBACrB1E,EADqB,KACT2E,EADS,OAEcD,oBAAS,GAFvB,mBAErBlE,EAFqB,KAENoE,EAFM,OAGUF,mBAAS,MAHnB,mBAGrB1C,EAHqB,KAGR6C,EAHQ,OAIQH,oBAAS,GAJjB,mBAIrBI,EAJqB,KAIRC,EAJQ,OAKIL,oBAAS,GALb,mBAKrBM,EALqB,KAKVC,EALU,KAyBtBzB,EAAuB,SAAApD,GACzB2E,GAAcD,IAGZI,EAA4B,WAChCD,GAAW,GACXE,IAAUC,MACN,SAAAC,GAAI,OAAIA,EAAKC,QAAO,SAAAC,GAAI,OAAIA,EAAKxD,OAASyD,OAAOxF,SACnDoF,MACE,SAAAK,GAAWZ,EAAeY,MAC5BL,MACA,WAAOH,GAAW,MAClBS,OACA,SAACC,GACGC,MAAMD,EAAIE,SACVZ,GAAW,OAKfa,EAAyB,WAC3Bb,GAAW,GACXE,IAAUC,MACN,SAAAC,GAAI,OAAIA,EAAKC,QAAO,SAAAC,GAAI,OAAIA,EAAKQ,QAAQ/F,IAAe,QAC1DoF,MACE,SAAAK,GAAWZ,EAAeY,MAC5BL,MACA,WAAOH,GAAW,MAClBS,OACA,SAACC,GACGC,MAAMD,EAAIE,SACVZ,GAAW,OAKfe,EAA2B,WAC7Bf,GAAW,GACXE,IAAUC,MACN,SAAAC,GAAI,OAAIA,EAAKC,QAAO,SAAApD,GAAI,OAAIA,EAAK+D,cAAcF,QAAQ/F,EAAWkG,sBAAwB,QAC5Fd,MACE,SAAAK,GAAWZ,EAAeY,MAC5BL,MACA,WAAOH,GAAW,MAClBS,OACE,SAACC,GACGC,MAAMD,EAAIE,SACVZ,GAAW,OAxEO,SA6EbE,IA7Ea,2EA6E5B,8BAAAhC,EAAA,sEAUyBgD,MAAM,8CAA+C,CACtEC,OAAQ,MACRC,QAAS,CACL,eAAgB,sBAb5B,cAUQC,EAVR,gBAgBqBA,EAASC,OAhB9B,cAgBQlB,EAhBR,yBAiBWA,EAAKA,MAjBhB,4CA7E4B,sBAiG5B,OACI,kBAACb,GAAD,KACI,kBAAC,EAAD,MACA,kBAAC7B,GAAD,CACI3C,WAAYA,EACZQ,cAAeA,EACfwB,YAAaA,EACb3B,uBAjGmB,SAAAN,GAC3B4E,EAAc5E,IAiGNU,0BA9FsB,WAC9BmE,GAAkBpE,IA8FVM,0BA3FsB,SAAAV,GAC9BA,EAAEoG,iBACFtB,KA0FQlE,6BAvFyB,SAAAZ,GACjCA,EAAEoG,iBACFhG,EAAgBsF,IAA2BE,OAuFvC,kBAAC,GAAD,CAAQxC,qBAAsBA,IAC7BsB,EAAc,kBAAC,GAAD,CAAOtB,qBAAsBA,IAA2B,KACtEwB,EAAY,kBAAC,GAAD,MAAc,SCrHnByB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEd7B,OAAM,SAAA8B,GACLC,QAAQD,MAAMA,EAAM3B,c","file":"static/js/main.b2fa6945.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst HeaderContainer = styled.header`\r\n    position: relative;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 100%;\r\n    padding: 1em 0;\r\n    background-color: #000000;\r\n    color: #FFFFFF;\r\n    text-align: center;\r\n`;\r\n\r\nconst H1 = styled.h1`\r\n    font-size: 32px;\r\n    font-weight: bold;\r\n    color: #FFFFFF;\r\n    letter-spacing: 0.1em;\r\n`;\r\n\r\nconst Header = props => {\r\n    return (\r\n        <HeaderContainer>\r\n            <H1>MRSoft Test Task</H1>\r\n        </HeaderContainer>\r\n    )\r\n};\r\n\r\nexport { Header };","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledFormContainer = styled.form`\r\n    display: block;\r\n    width: 100%;\r\n`;\r\n\r\nconst BlockSection = styled.section`\r\n    display: block;\r\n    margin: 0.5em;\r\n`;\r\n\r\nconst H2 = styled.h2`\r\n    font-size: 24px;\r\n    margin: 0.5em 0;\r\n`;\r\n\r\nconst FormTitle = styled(H2)`\r\n    text-align: center;\r\n`;\r\n\r\nconst Row = styled.div`\r\n    display: block;\r\n    margin: 0.5em;\r\n    box-sizing: border-box;\r\n    font-size: 0;\r\n`;\r\n\r\nconst Cell = styled.div`\r\n    display: inline-block;\r\n    width: 50%;\r\n    font-size: 0;\r\n    height: 100%;\r\n    vertical-align: middle;\r\n\r\n    @media screen and (max-width: 480px) {\r\n        display: block;\r\n        width: 100%;\r\n        text-align: center;\r\n    }\r\n\r\n    @media screen and (max-width: 320px) {\r\n        display: block;\r\n        width: 100%;\r\n    }\r\n`;\r\n\r\nconst Input = styled.input`\r\n    display: block;\r\n    box-sizing: border-box;\r\n    font-size: 16px;\r\n    font-weight: bold;\r\n    border: none;\r\n    border-radius: 10px;\r\n    padding: 3px 10px;\r\n    width: 100%;\r\n    margin: auto 0;\r\n\r\n    &[disabled] {\r\n        background-image: linear-gradient(45deg, #ffffff99 25%, #94ebd899 25%, #94ebd899 50%, #ffffff99 50%, #ffffff99 75%, #94ebd899 75%, #94ebd899 100%);\r\n        background-size: 60px 60px;\r\n        background-color: #94ebd8;\r\n        cursor: not-allowed;\r\n        opacity: 0.7;\r\n    }\r\n`;\r\n\r\nconst Label = styled.label`\r\n    display: block;\r\n    box-sizing: border-box;\r\n    font-size: 16px;\r\n    font-weight: bold;\r\n    border: none;\r\n    border-radius: 10px;\r\n    padding: 3px 10px;\r\n    width: 100%;\r\n    margin: auto 0;\r\n`;\r\n\r\nconst ButtonSection = styled.section`\r\n    display: flex;\r\n    margin: 0.5em;\r\n    flex-direction: row;\r\n    justify-content: space-around;\r\n\r\n    @media screen and (max-width: 480px) {\r\n        display: block;\r\n    }\r\n`;\r\n\r\nconst Button = styled.button`\r\n    padding: 10px 20px;\r\n    color: #FFFFFF;\r\n    font-weight: bold;\r\n    font-size: 16px;\r\n    background-color: #000000;\r\n    border: 5px solid #FFFFFF;\r\n    border-radius: 10px;\r\n    transition: all 0.5s;\r\n\r\n    &:hover {\r\n        background-color: #5E5E5E;\r\n    }\r\n\r\n    &[disabled] {\r\n        color: #0A0A0A;\r\n        background-image: linear-gradient(45deg, #ffffff 25%, #E30000 25%, #E30000 50%, #ffffff 50%, #ffffff 75%, #E30000 75%, #E30000 100%);\r\n        background-size: 60px 60px;\r\n        background-color: #999999;\r\n        cursor: not-allowed;\r\n        opacity: 0.7;\r\n    }\r\n\r\n    @media screen and (max-width: 640px) {\r\n        display: block;\r\n        width: 100%;\r\n        margin-bottom: 0.5em;\r\n    }\r\n`;\r\n\r\nconst FormContainer = props => {\r\n    return (\r\n        <StyledFormContainer>\r\n            <BlockSection>\r\n                <FormTitle>Form</FormTitle>\r\n            </BlockSection>\r\n            <BlockSection>\r\n                <Cell>\r\n                    <Row>\r\n                        <Cell>\r\n                            <Label htmlFor='input'>Enter string or number:</Label>\r\n                        </Cell>\r\n                        <Cell>\r\n                            <Input \r\n                                required\r\n                                id='input' \r\n                                value={props.inputValue} \r\n                                placeholder='Enter string or number' \r\n                                type='input' \r\n                                onChange={(e) => props.handleChangeInputValue(e.target.value)} \r\n                                >\r\n                            </Input>\r\n                        </Cell>\r\n                    </Row>\r\n                </Cell>\r\n                <Cell>\r\n                    <Row>\r\n                        <Cell>\r\n                            <Label htmlFor='case'>Case sensitive:</Label>\r\n                        </Cell>\r\n                        <Cell>\r\n                            <Input \r\n                                required\r\n                                id='case' \r\n                                checked={props.checkboxValue} \r\n                                type='checkbox'\r\n                                onChange={(e) => props.handleChangeCheckboxValue(e.target.value)} \r\n                                disabled={isNaN(props.inputValue.trim()) && props.inputValue.trim() != '' ? false : true}\r\n                                >\r\n                            </Input>\r\n                        </Cell>\r\n                    </Row>\r\n                </Cell>\r\n            </BlockSection>\r\n            <ButtonSection>\r\n                <Button \r\n                    onClick={e => props.handleFilterByLengthClick(e)} \r\n                    disabled={parseInt(props.inputValue.trim()) == props.inputValue ? false : true}\r\n                    >Filter by length</Button>\r\n                <Button\r\n                    onClick={e => props.handleFilterBySubstringClick(e)} \r\n                    disabled={isNaN(props.inputValue.trim()) && props.inputValue.trim() != '' ? false : true}\r\n                    >Filter by substring</Button>\r\n            </ButtonSection>\r\n        </StyledFormContainer>\r\n    )\r\n};\r\n\r\nexport { FormContainer };","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledListItem = styled.li`\r\n    list-style-position: inside;\r\n    font-size: 14px;\r\n`;\r\n\r\nconst ListItem = props => {\r\n    return (\r\n        <StyledListItem>{props.value}</StyledListItem>\r\n    )\r\n};\r\n\r\nexport { ListItem };","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { ListItem } from './ListItem';\r\n\r\nconst StyledListContainer = styled.ol`\r\n    list-style-type: decimal;\r\n    padding: 0;\r\n    margin: 0;\r\n`;\r\n\r\nconst ListContainer = props => {\r\n    const generateRandomIndex = () => {\r\n        let chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz$_^'.split('');\r\n        \r\n        let str = '';\r\n        for (let i = 0; i < 10; i++) {\r\n            str += chars[Math.floor(Math.random() * (chars.length))];\r\n        }\r\n        return str;\r\n    }\r\n\r\n    return (\r\n        <StyledListContainer>\r\n            {props.resultArray.map(item => {\r\n                return (\r\n                    <ListItem key={generateRandomIndex()} value={item}/>\r\n                )\r\n            })}\r\n        </StyledListContainer>\r\n    )\r\n};\r\n\r\nexport { ListContainer };","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { ListContainer } from './ListContainer';\r\n\r\nconst StyledResultContainer = styled.section`\r\n    display: flex;\r\n    flex: 1 1 auto;\r\n    flex-direction: column;\r\n    width: 100%;\r\n    height: 100%;\r\n    text-align: center;\r\n    overflow: hidden;\r\n`;\r\n\r\nconst H3 = styled.h3`\r\n    font-size: 18px;\r\n`;\r\n\r\nconst FormTitle = styled(H3)`\r\n    text-align: center;\r\n`;\r\n\r\nconst ResultContainer = props => {\r\n    return (\r\n        <StyledResultContainer>\r\n            <FormTitle>Result</FormTitle>\r\n            {props.resultArray.length ? <ListContainer resultArray={props.resultArray} /> : <p>No result on search conditions.</p>}\r\n        </StyledResultContainer>\r\n    )\r\n};\r\n\r\nexport { ResultContainer };","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { FormContainer } from './FormContainer';\r\nimport { ResultContainer } from './ResultContainer';\r\n\r\nconst MainContainer = styled.main`\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 100%;\r\n    box-sizing: border-box;\r\n    margin: 0 auto;\r\n    flex: 1 1 auto;\r\n    align-items: stretch;\r\n    position: relative;\r\n`;\r\n\r\nconst MainSection = styled.section`\r\n    display: flex;\r\n    flex-direction: column;\r\n    max-width: 960px;\r\n    width: 100%;\r\n    box-sizing: border-box;\r\n    margin: 0 auto;\r\n    flex: 1 1 auto;\r\n    align-items: stretch;\r\n    height: 100%;\r\n    background-color: #EEEEEE;\r\n`;\r\nconst Main = React.memo(props => {\r\n    return (\r\n        <MainContainer>\r\n            <MainSection>\r\n                <FormContainer \r\n                    inputValue={props.inputValue} \r\n                    checkboxValue={props.checkboxValue} \r\n                    handleChangeInputValue={props.handleChangeInputValue} \r\n                    handleChangeCheckboxValue={props.handleChangeCheckboxValue} \r\n                    handleFilterByLengthClick={props.handleFilterByLengthClick} \r\n                    handleFilterBySubstringClick={props.handleFilterBySubstringClick} \r\n                    />\r\n                {props.resultArray ? \r\n                    <ResultContainer \r\n                        resultArray={props.resultArray}\r\n                    /> : \r\n                    null\r\n                }\r\n            </MainSection>\r\n        </MainContainer>\r\n    )\r\n});\r\n\r\nexport { Main };","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst FooterContainer = styled.footer`\r\n    position: relative;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 100%;\r\n    padding: 0.5rem 0;\r\n    background-color: #111111;\r\n    color: #FFFFFF;\r\n    text-align: center;\r\n`;\r\n\r\nconst ProjectDescription = styled.p`\r\n    font-size: 14px;\r\n`;\r\n\r\nconst Link = styled.a`\r\n    color: #AAAAAA;\r\n    text-decoration: none;\r\n`;\r\n\r\nconst Span = styled.span`\r\n    color: #AAAAAA;\r\n    cursor: pointer; \r\n`;\r\n\r\nconst Footer = props => {\r\n    return (\r\n        <FooterContainer>\r\n            <ProjectDescription>This project uses <Link href='https://reactjs.org/'>React</Link>, <Link href='https://styled-components.com/'>styled-components</Link> and <Link href='heroku.com'>Heroku</Link>.<br />\r\n            This project was created as <Span onClick={e => props.handleClickOpenModal(e)}>test task</Span> to Web-developer position at <Link href='https://www.mrsoft.by/'>mrsoft.by</Link>.<br />\r\n            <Link href='https://github.com/IvanMankovich/mrsoft-test-task'>Client side code</Link><br />\r\n            <Link href='https://github.com/IvanMankovich/mrsoft-test-task-api'>API code</Link>\r\n            </ProjectDescription>\r\n        </FooterContainer>\r\n    )\r\n};\r\n\r\nexport { Footer };","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst ModalPadding = styled.div`\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    bottom: 0;\r\n    right: 0;\r\n    background-color: #FFFFFF99;\r\n    backdrop-filter: blur(5px);\r\n    z-index: 3;\r\n`;\r\n\r\nconst ModalWindow = styled.div`\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    background-color: #FFFFFF77;\r\n    border: 1px solid #00000033;\r\n    border-radius: 5px;\r\n    box-sizing: border-box;\r\n    width: 80%;\r\n    height: 80%;\r\n    margin: auto;\r\n`;\r\n\r\nconst ModalHeader = styled.section`\r\n    padding: 3px 10px;\r\n    border-bottom: 1px solid #FFFFFF77;\r\n`;\r\n\r\nconst H4 = styled.h4`\r\n    font-size: 16px;\r\n    font-weight: bold;\r\n    text-align: center;\r\n`;\r\n\r\nconst CloseBtn = styled.button`\r\n    position: absolute;\r\n    right: 0;\r\n    top: 0;\r\n    transform: translate(-5px, -5px)\r\n               rotate(45deg);\r\n    font-size: 24px;\r\n    font-weight: bold;\r\n    color: #00000099;\r\n    background-color: transparent;\r\n    border: none;\r\n    width: 24px;\r\n    height: 24px;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n`;\r\n\r\nconst ModalBody = styled.section`\r\n    padding: 10px;\r\n`;\r\n\r\nconst UL = styled.ul`\r\n    list-style-type: disc;\r\n    list-style-position: inside;\r\n`;\r\n\r\nconst Modal = props => {\r\n    return (\r\n        <ModalPadding id='modalPadding' onClick={e => {(e.target.id === 'modalPadding' || e.target.id === 'modalX') && props.handleClickOpenModal(e)}}>\r\n            <ModalWindow>\r\n                <ModalHeader>\r\n                    <CloseBtn id='modalX' type='button'>+</CloseBtn>\r\n                    <H4>Тестовое задание</H4>\r\n                </ModalHeader>\r\n                <ModalBody>\r\n                        <p>Сделать страницу, на которой будет:</p>\r\n                            <UL>\r\n                                <li>поле для ввода;</li>\r\n                                <li>checkbox;</li>\r\n                                <li>две кнопки;</li>\r\n                                <li>место для вывода данных.</li>\r\n                            </UL>\r\n                            <p>Одна кнопка - фильтр по длине слов, вторая кнопка - фильтр по подстроке. Checkbox отвечает за чувствительность регистра поиска.<br />\r\n        При вводе в поле числа и клике по кнопке фильтра по длине слов в место для вывода данных выводятся строки с длиной строки больше введенного числа.<br />\r\n        При вводе строки в поле и клике по кнопке фильтра по подстроке в место для вывода данных выводятся строки, которые содержат введенную подстроку.<br />\r\n        Если checkbox чувствительности регистра проставлен, строки сравниваются с учетом регистра ('aAa' не равно 'aaa'). Если checkbox снят, строки сравниваются без учета регистра ('aAa' равно 'aaa').<br />\r\n        Данные берутся HTTP запросом по адресу http://www.mrsoft.by/data.json, из поля data полученного объекта. Файл со временем не меняется.\r\n                        </p>\r\n                </ModalBody>\r\n            </ModalWindow>\r\n        </ModalPadding>\r\n    )\r\n};\r\n\r\nexport { Modal };","import React from 'react';\r\nimport styled, {keyframes} from 'styled-components';\r\n\r\nconst rotate = keyframes`\r\n    from {\r\n        transform: rotate(0deg);\r\n    }\r\n\r\n    to {\r\n        transform: rotate(360deg);\r\n    }\r\n`\r\n\r\nconst LoadingPadding = styled.div`\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    bottom: 0;\r\n    right: 0;\r\n    background-color: #FFFFFF99;\r\n    backdrop-filter: blur(5px);\r\n    z-index: 3;\r\n`;\r\n\r\nconst LoadingBody = styled.section`\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    width: 50px;\r\n    height: 50px;\r\n    border-radius: 50%;\r\n    box-sizing: border-box;\r\n    background-image: linear-gradient(#FFFFFF, #000000);\r\n    animation: ${rotate} 4s linear infinite;\r\n`;\r\n\r\nconst Loading = props => {\r\n    return (\r\n        <LoadingPadding>\r\n            <LoadingBody>\r\n            </LoadingBody>\r\n        </LoadingPadding>\r\n    )\r\n};\r\n\r\nexport { Loading };","import React, {useState} from 'react';\nimport styled from 'styled-components';\nimport { Header } from './components/Header';\nimport { Main } from './components/Main';\nimport { Footer } from './components/Footer';\nimport { Modal } from './components/Main/Modal';\nimport { Loading } from './components/Main/Loading';\n\nconst StyledApp = styled.div`\n    min-height: 100vh;\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    box-sizing: border-box;\n    font-family: Arial, Helvetica, sans-serif;\n    width: 100%;\n`;\n\nconst App = React.memo(props => {\n    const [inputValue, setInputValue] = useState(''),\n          [checkboxValue, setCheckboxValue] = useState(false),\n          [resultArray, setResultArray] = useState(null),\n          [isModalOpen, setModalOpen] = useState(false),\n          [isLoading, setLoading] = useState(false);\n\n    const handleChangeInputValue = value => {\n        setInputValue(value);\n    }\n\n    const handleChangeCheckboxValue = () => {\n        setCheckboxValue(!checkboxValue);\n    }\n\n    const handleFilterByLengthClick = e => {\n        e.preventDefault();\n        getResultFilteredByLength();\n    }\n\n    const handleFilterBySubstringClick = e => {\n        e.preventDefault();\n        checkboxValue ? getCaseSensitiveSubstr() : getCaseInsensitiveSubstr();\n    }\n\n    const handleClickOpenModal = e => {\n        setModalOpen(!isModalOpen);\n    }\n\n    const getResultFilteredByLength = () => {\n      setLoading(true);\n      getData().then(\n          data => data.filter(word => word.length > Number(inputValue))\n      ).then(\n          result => {setResultArray(result)}\n      ).then(\n        () => {setLoading(false)}\n      ).catch(\n        (err) => {\n            alert(err.message);\n            setLoading(false);\n          }\n    )\n  }\n\n  const getCaseSensitiveSubstr = () => {\n      setLoading(true);\n      getData().then(\n          data => data.filter(word => word.indexOf(inputValue) > -1)\n      ).then(\n          result => {setResultArray(result)}\n      ).then(\n        () => {setLoading(false)}\n      ).catch(\n        (err) => {\n            alert(err.message);\n            setLoading(false);\n          }\n    )\n  }\n\n  const getCaseInsensitiveSubstr = () => {\n      setLoading(true);\n      getData().then(\n          data => data.filter(item => item.toLowerCase().indexOf(inputValue.toLocaleLowerCase()) > -1)\n      ).then(\n          result => {setResultArray(result)}\n      ).then(\n        () => {setLoading(false)}\n      ).catch(\n          (err) => {\n              alert(err.message);\n              setLoading(false);\n            }\n      )\n  };\n\n    async function getData() {\n        // used local\n        // let response = await fetch('http://localhost:3000/', {\n        //     method: 'GET',\n        //     headers: {\n        //         'Content-Type': 'application/json',\n        //     }\n        // })\n    \n        // used remote\n        let response = await fetch('https://mrsoft-test-task-api.herokuapp.com/', {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        })\n        let data = await response.json();\n        return data.data;\n    }\n\n    return (\n        <StyledApp>\n            <Header />\n            <Main \n                inputValue={inputValue} \n                checkboxValue={checkboxValue} \n                resultArray={resultArray}\n                handleChangeInputValue={handleChangeInputValue} \n                handleChangeCheckboxValue={handleChangeCheckboxValue} \n                handleFilterByLengthClick={handleFilterByLengthClick} \n                handleFilterBySubstringClick={handleFilterBySubstringClick} \n              />\n            <Footer handleClickOpenModal={handleClickOpenModal} />\n            {isModalOpen ? <Modal handleClickOpenModal={handleClickOpenModal} /> : null}\n            {isLoading ? <Loading /> : null}\n        </StyledApp>\n    );\n})\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './reset.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}